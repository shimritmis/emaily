const passport= require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys'); 

const User = mongoose.model('users'); 

passport.serializeUser((user, done)=> { //same user as existingUser, done is a callbak that we have to call after we have done some work with passport. 
    done(null, user.id); // null- there's no errors, 
    //user.id- not the google/profile id!! this is the "_id" from the database. a unique identifier that was automatically generated by mongo and assigned to a record we can see in our users collection in the db. 
    //user.id is a string. "internal id". 
});

passport.use(
    new GoogleStrategy({
    clientID : keys.googleClientID,
    clientSecret: keys.googleClientSecret,
    callbackURL: '/auth/google/callback'
}, 
(accessToken, refreshToken, profile, done) => {
    User.findOne({googleId: profile.id})
    .then((existingUser)=>{
        if(existingUser) {
            //we already have a record with the given profile ID
            done(null, existingUser);
        } else {
            //we don't have a user record with this ID, so make a new record
            new User ({googleId:profile.id}).save()
            .then(user => done(null, user));
        }
    });
}));

